// Prisma schema for NextAuth (with passwordHash support for Credentials provider)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  isActive             Boolean   @default(false)
  stripeCustomerId     String?
  passwordHash         String?
  completed_onboarding Boolean   @default(false) @map("completed_onboarding")

  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  activityAreas ActivityAreas[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Address   Address[]
  Links     Links[]
  Gallery   Gallery[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  avatarUrl        String?
  whatsapp         String?
  instagramUrl     String?
  publicName       String?
  aboutDescription String?
  publicEmail      String?
  publicPhone      String?
  slug             String? @unique
  primaryColor     String  @default("#000e29")
  secondaryColor   String  @default("#e8e8e8")
  textColor        String  @default("#FFFFFF")
  coverUrl         String? @default("https://advoga-site.s3.us-east-2.amazonaws.com/covers/covers_cmehhui1b000adp8wog0ziszn.1755786112784_tiny.png")
  calendlyUrl      String?
  metaDescription  String?
  metaTitle        String?
  keywords         String?
  gtmContainerId   String?
  theme            String? @default("modern")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityAreas {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title         String
  coverImageUrl String?
  description   String?
  position      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, position], map: "ActivityAreas_userId_position_idx")
}

model Links {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title         String
  description   String?
  url           String
  coverImageUrl String?
  position      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gallery {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  coverImageUrl String?
  position      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  public       Boolean @default(true)
  zipCode      String?
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?
}
